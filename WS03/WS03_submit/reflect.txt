Name: Wonkeun No
Student ID: 145095196
Section: NBB

This week I learned how to use template in inherited relationship. I practiced template in last semester, but it was much simpler workshop. So I needed some time to learn that template parameter order matters and its syntax how to use it with multiple parameters. I also used template specialization to overload operator+= as std::string class version requires different operation versus int operation. And I see that initial value automatically re-typed from std::string to int when template parameter is changed. I think it’s because both are synchronized as the initial uses the same template V as value. In addition, variable initialization was very convenient as compiler generates initial value based on type automatically. In last semester’s workshop, template class header file was given without implementation file. I didn’t know the reason, but now I understand it’s because compiler generates actual implementation code according to type definition by referencing template implementation. If I separate implementation separately, compiler can’t do this. Lastly, I defined static variables outside of class definition as static variables can’t be used. 